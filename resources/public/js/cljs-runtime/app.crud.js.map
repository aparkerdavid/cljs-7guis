{"version":3,"sources":["app/crud.cljs"],"mappings":";AAIA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AAUL,AAAA,AAAMC;AAAN,AACE,AAAMC,AAAM,AAACC,AAAOH;AACdI,AAAiB,AAAA,AAACD;AAClBE,AAAgB,AAAA,AAACF;AACjBG,AAAY,AAAA,AAACH;AACbI,AAAW,AAAA,AAACJ;AACZK,AAAkB,AAAA,AAACL;AALzB,AAME;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAM,AAAA,AAES,AAAA,AAAAA,AAAMH,AAIDC,AACG,AAAKG;AAAL,AAAQ,AAACC,AAAOJ,AAAW,AAAA,AAAIG;AAPhD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAWcL,AACG,AAAKM;AAAL,AAAQ,AAACC,AAAOP,AAAiB,AAAA,AAAIM;AAZtD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAgBcJ,AACG,AAAKK;AAAL,AAAQ,AAACC,AAAON,AAAgB,AAAA,AAAIK;AAjBrD,AAAA,AAAA,AAAA,AAoBK,AAAKA;AAAL,AACE,AAAM,AAAA,AAAA,AAAAD,AAAKL,AAAiBQ;AAA5B,AACE,AAAA,AAAAC,AAACC,AAAMZ;AAAP,AAAc,AAAAW,AAAA,AAAA,AAAAJ,AAAA,AAAA,AAAAA,AAACM,AAAaT,AAAqBF;;;AADnD;;AAEA,AAAM,AAAA,AAAA,AAAAK,AAAKJ,AAAgBO;AAA3B,AACE,AAAA,AAAAI,AAACF,AAAMZ;AAAP,AAAc,AAAAc,AAAA,AAAA,AAAAP,AAAA,AAAA,AAAAA,AAACM,AAAaT,AAAoBD;;;AADlD;;AAvBP,AAAA,AAAA,AAAA,AAAA,AA4BK,AAAKK;AAAL,AACE,AAAA,AAAAO,AAACH,AAAMZ;AAAP,AAAc,AAAAe,AAAA,AAAAR,AAACS,AAAUZ;;;AACzB,AAACK,AAAOL,AAAY,AAAA,AAAA,AAAAG,AAAKP,AAAMiB,AAAKC;AA9B3C,AAAA,AAAA,AAAA,AAAA,AAkCK,AAAKV;AAAL,AACE,AAAA,AAAAW,AAACP,AACAZ;AADD,AAEE,AAAAmB,AAAA,AAAAZ,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAA,AAACa,AACOd,AACQJ,AAAwBC;;;AAC1C,AAACS,AAAMN,AAAkBe;AAxChC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAd,AAAA,AA4CaH,AACG,AAAKI;AAAL,AAAQ,AAACC,AAAOL,AAAY,AAAA,AAAA,AAAII,AAAmBc;AAS1D,AAACS,AACA,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAN,AAAAO,AAAA,AAAA,AAAMN;AAAN,AAAAD,AAAAO,AAAA,AAAA,AAAQL;AAAR,AAAA,AAAA,AAAA,AAAA,AAAA,AAEWD,AACFA,AACN,AAAA,AAAK,AAAA,AAAA,AAACC,AAAAA,AAAAA,AAAc,AAAA,AAAA,AAACA,AAAAA,AAAAA;AAZzB,AAACL,AACA,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAME;AAAN,AAAAD,AAAAD,AAAA,AAAA,AAAQG;AAAR,AACE,AAAI,AAAA,AAAArB,AAACG,AAAeL;AAApB;;AAEE,AAACwB,AACA,AAACC,AAAkB,AAAA,AAAA,AAACF,AAAAA,AAAAA,AACpB,AAAA,AAAArB,AAACuB,AAAmBzB;;AAPzBL,AACD,AAAAO","names":["app.crud/sample-names","app.crud/crud","names","reagent.core.atom","first-name-input","last-name-input","selected-id","filter-str","current-key-index","cljs.core/deref","e","cljs.core/reset!","clojure.string/blank?","p1__41166#","cljs.core.swap_BANG_","cljs.core/assoc-in","p1__41167#","p1__41168#","cljs.core.dissoc","cljs.core/keys","cljs.core/first","p1__41169#","cljs.core.assoc","cljs.core/inc","js/parseInt","cljs.core.filter","p__41174","vec__41175","cljs.core.nth","k","v","clojure.string/starts-with?","clojure.string/lower-case","cljs.core.map","p__41170","vec__41171"],"sourcesContent":["(ns app.crud\n  (:require [reagent.core :as r]\n            [clojure.string :as string]))\n\n(def sample-names\n  {0 {:first \"Lebbeus\"\n      :last \"Woods\"}\n   1 {:first \"Bruce\"\n      :last \"Mau\"}\n   2 {:first \"Christopher\"\n      :last \"Alexander\"}\n   3 {:first \"Jane\"\n      :last \"Jacobs\"}})\n\n(defn crud []\n  (let [names (r/atom sample-names)\n        first-name-input (r/atom \"\")\n        last-name-input (r/atom \"\")\n        selected-id (r/atom 0)\n        filter-str (r/atom \"\")\n        current-key-index (r/atom 4)]\n    (fn []\n      [:div\n       [:div (str @selected-id)]\n       [:div\n        \"Filter: \"\n        [:input\n         {:value @filter-str\n          :on-change (fn [e] (reset! filter-str (-> e .-target .-value)))}]]\n       [:div\n        \"First name:\"\n        [:input\n         {:value @first-name-input\n          :on-change (fn [e] (reset! first-name-input (-> e .-target .-value)))}]]\n       [:div\n        \"Last name: \"\n        [:input\n         {:value @last-name-input\n          :on-change (fn [e] (reset! last-name-input (-> e .-target .-value)))}]]\n       [:button\n        {:on-click\n         (fn [e]\n           (when (-> @first-name-input string/blank? not)\n             (swap! names #(assoc-in % [@selected-id :first] @first-name-input)))\n           (when (-> @last-name-input string/blank? not)\n             (swap! names #(assoc-in % [@selected-id :last] @last-name-input))))}\n        \"Update\"]\n       [:button\n        {:on-click\n         (fn [e]\n           (swap! names #(dissoc % @selected-id))\n           (reset! selected-id (-> @names keys first)))}\n        \"Delete\"]\n       [:button\n        {:on-click\n         (fn [e]\n           (swap!\n            names\n            #(assoc %\n                    @current-key-index\n                    {:first @first-name-input :last @last-name-input}))\n           (swap! current-key-index inc))}\n        \"Create\"]\n       [:select\n        {:size \"10\"\n         :value @selected-id\n         :on-change (fn [e] (reset! selected-id (-> e .-target .-value js/parseInt)))}\n        (->> @names\n             (filter\n              (fn [[k v]]\n                (if (string/blank? @filter-str)\n                  true\n                  (string/starts-with?\n                   (string/lower-case (v :last))\n                   (string/lower-case @filter-str)))))\n             (map\n              (fn [[k v]]\n                [:option\n                 {:value k\n                  :key k}\n                 (str (v :first) \" \" (v :last))])))]])))\n"]}