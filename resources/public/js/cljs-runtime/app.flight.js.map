{"version":3,"sources":["app/flight.cljs"],"mappings":"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","names":["app.flight/validate-date-str","s","js-date","js/Date","cljs.core/some","js/Number.isNaN","cljs.core/re-matches","cljs.core._EQ_","cljs.core.subs","app.flight/flight-type-input","state","fexpr__40758","cljs.core/deref","e","p1__40757#","cljs.core.swap_BANG_","cljs.core.assoc","p__40760","map__40761","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","app.flight/flight-date-input","context","value","invalid-when","complete-when","disabled-when","validity","reagent.core.atom","G__40763","fexpr__40764","v","p1__40759#","js/console.log","app.flight/flight-submit-button","cljs.core.not_EQ_","p1__40765#","fexpr__40769","fexpr__40771","app.flight/flight-booker","p1__40772#","p1__40773#","p1__40774#","p1__40775#","ctx","fexpr__40776"],"sourcesContent":["(ns app.flight\n  (:require [reagent.core :as r]\n            [clojure.string :as string]))\n\n(defn validate-date-str [s]\n  (let [js-date (js/Date. s)]\n    (cond\n      (some js/Number.isNaN [(.getMonth js-date) (.getDay js-date) (.getYear js-date)])\n      :invalid\n      (re-matches #\"^[0-9]{4}-[0-9]{2}-[0-9]{2}$\" s)\n      (if\n       (= s\n          (subs (.toISOString js-date) 0 10))\n        :complete\n        :invalid))))\n\n(defn flight-type-input [state]\n  [:select {:value (@state :flight-type)\n            :on-change\n            (fn [e]\n              (swap! state #(assoc % :flight-type (-> e .-target .-value))))}\n   [:option {:value \"one-way\"} \"One-Way\"]\n   [:option {:value \"round-trip\"} \"Round-Trip\"]])\n\n(defn flight-date-input [{:keys [context value invalid-when complete-when disabled-when]}]\n  (let [validity (r/atom :incomplete)]\n    (fn []\n      [:input {:class\n               (cond\n                 (= @validity :invalid) \"invalid\"\n                 (= @validity :complete) \"complete\")\n               :disabled (when disabled-when\n                           (disabled-when @context))\n               :value (@context value)\n               :on-change (fn [e]\n                            (let [v (-> e .-target .-value)]\n                              (swap! context #(assoc % value v))\n                              (js/console.log (validate-date-str v))))}])))\n\n(defn flight-submit-button [context]\n  [:button\n   {:disabled (or\n               (-> @context :departure-date validate-date-str (not= :complete))\n               (and\n                (-> @context :flight-type (= \"round-trip\"))\n                (or\n                 (-> @context :return-date validate-date-str (not= :complete))\n                 (> (-> @context :departure-date js/Date.) (-> @context :return-date js/Date.)))))\n    :on-click\n    (fn [e]\n      (swap!\n       context\n       #(assoc % :message\n               (str\n                \"Booked a flight departing on \"\n                (@context :departure-date)\n                (when\n                 (-> @context :flight-type (= \"round-trip\"))\n                  (str \", returning on \" (@context :return-date)))))))}\n   \"Submit\"])\n\n(defn flight-booker []\n  (let [state (r/atom {:flight-type \"one-way\"\n                       :departure-date \"\"\n                       :return-date \"\"\n                       :message \"\"})]\n    (fn []\n      [:div\n       [flight-type-input state]\n       [flight-date-input {:context state\n                           :value :departure-date\n                           :invalid-when #(= (validate-date-str %) :invalid)\n                           :complete-when #(= (validate-date-str %) :complete)}]\n       [flight-date-input {:context state\n                           :value :return-date\n                           :invalid-when #(= (validate-date-str %) :invalid)\n                           :complete-when #(= (validate-date-str %) :complete)\n                           :disabled-when (fn [ctx] (= (:flight-type ctx) \"one-way\"))}]\n       [flight-submit-button state]\n       [:div (@state :message)]])))\n"]}