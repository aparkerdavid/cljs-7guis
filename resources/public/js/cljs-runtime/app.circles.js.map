{"version":3,"sources":["app/circles.cljs"],"mappings":"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","names":["js/app","js/app.circles","js/app.circles.circles","app.circles/circles","reagent.core.atom","js/app.circles.canvas","app.circles/canvas","js/app.circles.undo-queue","app.circles/undo-queue","js/app.circles.redo-queue","app.circles/redo-queue","js/app.circles.mouse-pos","app.circles/mouse-pos","js/app.circles.current-id","app.circles/current-id","p__51798","vec__51799","cljs.core.nth","app.circles/add-circle","x","y","p1__51796#","cljs.core.swap_BANG_","cljs.core/deref","cljs.core.assoc","p1__51797#","cljs.core.conj","cljs.core/inc","cljs.core/reset!","app.circles/resize-circle","id","r","old-r","fexpr__51804","p1__51802#","cljs.core/assoc-in","p1__51803#","app.circles/undo","vec__51809","op","cljs.core/last","circle","fexpr__51812","p1__51805#","cljs.core.dissoc","cljs.core/pop","p1__51806#","p1__51807#","p1__51808#","app.circles/redo","vec__51815","p1__51813#","fexpr__51818","p1__51814#","app.circles/xy","e","rect","app.circles/distance","x1","y1","x2","y2","js/Math.sqrt","js/Math.pow","app.circles/selected-circle","circles","mouse-pos","vec__51819","mouse-x","mouse-y","distance","p__51822","map__51823","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","circle-x","circle-y","cljs.core.sort_by","p__51829","vec__51830","k","v","cljs.core/first","p__51825","vec__51826","app.circles/selected-circle-2","vec__51833","p__51836","map__51837","p__51843","vec__51844","p__51839","vec__51840","p__51847","map__51848","app.circles/draw-circle-2","color","ctx","js/Math.PI","p__51850","map__51851","app.circles/draw-circle","p__51853","map__51854","app.circles/draw-selected-circle","app.circles/redraw","selected-circle","cljs.core.doall","p1__51856#","cljs.core.map","cljs.core/vals","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","app.circles/draw-all-circles","seq51858","G__51859","cljs.core/next","G__51860","self__4723__auto__","p1__51857#","app.circles/main","current-id","reagent.core.create_class","this","reagent.dom/dom-node","cljs.core/add-watch","reagent.core.force_update"],"sourcesContent":["(ns app.circles\n  (:require [reagent.core :as r]\n            [reagent.dom :as rdom]))\n\n(defonce circles (r/atom {}))\n(defonce canvas (r/atom nil))\n(defonce undo-queue (r/atom []))\n(defonce redo-queue (r/atom []))\n(defonce mouse-pos (r/atom []))\n(defonce current-id (r/atom 0))\n\n(defn add-circle [[x y]]\n  (swap! circles #(assoc % @current-id {:x x :y y :r 50}))\n  (swap! undo-queue #(conj % [@current-id nil]))\n  (swap! current-id inc)\n  (reset! redo-queue []))\n\n(defn resize-circle [id r]\n  (let [old-r (@circles id :r)]\n    (swap! circles #(assoc-in % [id :r] r))\n    (swap! undo-queue #(conj % [id old-r]))\n    (reset! redo-queue [])))\n\n(defn undo []\n  (let [[id op] (last @undo-queue)\n        circle [id (@circles id)]]\n    (if (nil? op)\n      (do\n        (swap! circles #(dissoc % id))\n        (swap! undo-queue pop)\n        (swap! redo-queue #(conj % circle)))\n      (do\n        (swap! circles #(conj % {id op}))\n        (swap! undo-queue pop)\n        (swap! redo-queue #(conj % circle))))))\n\n(defn redo []\n  (let [[id op] (last @redo-queue)]\n    (swap! undo-queue #(conj % [id (@circles id)]))\n    (swap! circles #(assoc % id op))\n    (swap! redo-queue pop)))\n\n(defn xy [e]\n  (let [rect (.getBoundingClientRect (.-target e))]\n    [(- (.-clientX e) (.-left rect))\n     (- (.-clientY e) (.-top rect))]))\n\n(defn distance [x1 y1 x2 y2]\n  (js/Math.sqrt\n   (+\n    (js/Math.pow (- x1 x2) 2)\n    (js/Math.pow (- y1 y2) 2))))\n\n(defn selected-circle [circles mouse-pos]\n  (let [[mouse-x mouse-y] mouse-pos\n        distance (fn [{circle-x :x circle-y :y}]\n                   (distance mouse-x mouse-y circle-x circle-y))]\n    (->> circles\n         (sort-by (fn [[k v]] (distance v)))\n         first\n         ((fn [[k v]]\n            (when (< (distance v) (:r v))\n              v))))))\n\n(defn selected-circle-2 [mouse-pos]\n  (let [[mouse-x mouse-y] mouse-pos\n        distance (fn [{circle-x :x circle-y :y}]\n                   (distance mouse-x mouse-y circle-x circle-y))]\n    (->> @circles\n         (sort-by (fn [[k v]] (distance v)))\n         first\n         ((fn [[k v]]\n            (when (< (distance v) (:r v))\n              v))))))\n\n(defn draw-circle-2 [{x :x y :y r :r} color]\n  (let [ctx (.getContext @canvas \"2d\")]\n    (set! (. ctx -fillStyle) color)\n    (.moveTo ctx x y)\n    (.beginPath ctx)\n    (.arc ctx x y r 0 (* 2 js/Math.PI))\n    (.fill ctx)\n    (.stroke ctx)))\n\n(defn draw-circle [{x :x y :y r :r} ctx]\n  (set! (. ctx -fillStyle) \"#fff\")\n  (.moveTo ctx x y)\n  (.beginPath ctx)\n  (.arc ctx x y r 0 (* 2 js/Math.PI))\n  (.fill ctx)\n  (.stroke ctx))\n\n(defn draw-selected-circle [{x :x y :y r :r} ctx]\n  (set! (. ctx -fillStyle) \"#666\")\n  (.moveTo ctx x y)\n  (.beginPath ctx)\n  (.arc ctx x y r 0 (* 2 js/Math.PI))\n  (.fill ctx)\n  (.stroke ctx))\n\n(defn redraw [mouse-pos]\n  (let [ctx (.getContext @canvas \"2d\")\n        selected-circle (selected-circle-2 mouse-pos)]\n    (set! (. ctx -fillStyle) \"#eee\")\n    (.fillRect ctx 0 0 800 600)\n    (doall (map #(draw-circle-2 % \"#fff\") (vals @circles)))\n    (draw-circle-2 selected-circle \"#666\")))\n\n(defn draw-all-circles [circles ctx & mouse-pos]\n  (set! (. ctx -fillStyle) \"#eee\")\n  (.fillRect ctx 0 0 800 600)\n  (doall (map #(draw-circle % ctx) (vals circles)))\n  (draw-selected-circle (selected-circle circles (first mouse-pos)) ctx))\n\n(defn ^:export main []\n  (let [mouse-pos (r/atom [])\n        current-id (r/atom 0)]\n\n    (r/create-class\n\n     {:display-name \"circles\"\n\n      :component-did-mount\n      (fn [this]\n        (reset! canvas (. (rdom/dom-node this) querySelector \"#circles-canvas\"))\n        (let [ctx (.getContext @canvas \"2d\")]\n          (set! (. ctx -fillStyle) \"#eee\")\n          (.fillRect ctx 0 0 800 600))\n        (add-watch circles :component-update-circles #(r/force-update this))\n        (add-watch mouse-pos :component-update-mouse-pos #(r/force-update this)))\n\n      :component-did-update\n      (fn [this]\n        (let [ctx (.getContext @canvas \"2d\")]\n          (redraw @mouse-pos)\n          ;; (draw-all-circles @circles ctx @mouse-pos)\n          ))\n\n      :reagent-render\n      (fn []\n        [:div\n         [:canvas\n          {:id \"circles-canvas\"\n           :width 800\n           :height 600\n           :on-mouse-move\n           (fn [e]\n             (reset! mouse-pos (xy e)))\n\n           :on-click\n           (fn [e]\n             (add-circle (xy e)))}]\n         [:button {:on-click undo} \"Undo\"]\n         [:button {:on-click redo} \"Redo\"]])})))\n"]}