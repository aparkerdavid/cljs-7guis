{"version":3,"sources":["app/timer.cljs"],"mappings":";AAGA,AAAA,AAAMC,AAAcC;AAApB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAF,AAAA,AAKYE,AACG,AAAKC;AAAL,AAAQ,AAACC,AAAOF,AAAM,AAAA,AAAIC;;;AAEzC,AAAA,AAAME;AAAN,AACE,AAAMC,AAAO,AAAA,AAACC;AACRC,AAAQ,AAAA,AAACD;AACTE,AAAM,AAAA,AAACF;AACPG,AAAM,AAAA,AAAGC;AAAH,AACI,AACE,AAAA,AAAAX,AAAA,AAAAA,AAAKQ,AAASC;AACd,AACE,AAAA,AAACL,AAAOE;;AACR,AAAA,AAACF,AAAOI;;AAJZ,AAAA,AAAAR,AAKGM;AACD,AAACM,AAAMJ,AAAQK;;AANjB;;;;AAJhB,AAWE;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAOY,AAAA,AAAO,AAAA,AAAAb,AAAA,AAAAA,AAAIQ,AAASC,AACvB,AAAA,AAAAT,AAAA,AAAA,AAAAA,AAAMQ,AAAeC,AACrB,AAAA,AAAAT,AAAA,AAAAA,AAAIQ,AAASC,AAClBR,AAAaQ,AAEF,AAAKN;AAAL,AAAQ,AAACS,AAAMN,AAAOQ;AAZrC,AAAA,AAAA,AAAA,AAaI,AAAA,AAAAd,AAAA,AAAA,AAAKM,AAEM,AAAKH;AAAL,AAAQ,AAAA,AAACC,AAAOI;AAf/B","names":["cljs.core/deref","app.timer/limit-slider","value","e","cljs.core/reset!","app.timer/timer","active","reagent.core.atom","elapsed","limit","timer","js/window","cljs.core.swap_BANG_","cljs.core/inc","cljs.core/not"],"sourcesContent":["(ns app.timer\n  (:require [reagent.core :as r]))\n\n(defn limit-slider [value]\n  [:input\n   {:type \"range\"\n    :min \"0\"\n    :max \"1000\"\n    :value @value\n    :on-change (fn [e] (reset! value (-> e .-target .-value)))}])\n\n(defn timer []\n  (let [active (r/atom false)\n        elapsed (r/atom 0)\n        limit (r/atom 1000)\n        timer (. js/window setInterval\n                 #(cond\n                    (>= @elapsed @limit)\n                    (do\n                      (reset! active false)\n                      (reset! elapsed 0))\n                    @active\n                    (swap! elapsed inc)))]\n    (fn []\n      [:div\n       [:input\n        {:type \"range\"\n         :disabled true\n         :min \"0\"\n         :max \"100\"\n         :value (* 100 (/ @elapsed @limit))}]\n       [:div (str @elapsed \" / \" @limit)]\n       [:div (/ @elapsed @limit)]\n       [limit-slider limit]\n       [:button\n        {:on-click (fn [e] (swap! active not))}\n        (if @active \"Stop\" \"Start\")]\n       [:button\n        {:on-click (fn [e] (reset! elapsed 0))}\n        \"Reset\"]])))\n"]}