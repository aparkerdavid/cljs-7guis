{"version":3,"sources":["app/components.cljs"],"mappings":"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","names":["app.components/counter","cnt","reagent.core.atom","cljs.core/deref","cljs.core.swap_BANG_","cljs.core/inc","app.components/f->c","f","app.components/c->f","c","app.components/valid-float?","s","cljs.core._EQ_","js/parseFloat","app.components/temperature-input","value","is-valid-fn","valid","e","v","cljs.core/reset!","app.components/temperature-converter","celsius-input","fahrenheit-input","p1__39462#","p1__39463#","app.components/validate-date-str","js-date","js/Date","cljs.core/not-every?","js/Number.isNaN","app.components/flight-type-input","state","fexpr__39465","p1__39464#","cljs.core.assoc","p__39467","map__39468","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","app.components/flight-date-input","context","invalid-when","complete-when","disabled-when","validity","and__4115__auto__","G__39470","fexpr__39471","p1__39466#","p__39472","map__39473","app.components/flight-submit-button","G__39475","js/console.log","fexpr__39476","app.components/flight-booker","ctx","cljs.core/some","cljs.core/nil?","cljs.core.map"],"sourcesContent":["(ns app.components\n  (:require [reagent.core :as r]\n            [reagent.dom :as rd]))\n\n(defn counter []\n  (let [cnt (r/atom 0)]\n    (fn []\n      [:div\n       (str @cnt)\n       [:button {:on-click #(swap! cnt inc)} \"Increment!\"]])))\n\n(defn f->c [f]\n  (* (- f 32) (/ 5 9)))\n\n(defn c->f [c]\n  (+ 32 (* c (/ 9 5))))\n\n(defn valid-float? [s]\n  (= s (-> s js/parseFloat str)))\n\n(defn temperature-input [value is-valid-fn]\n  (let [valid (r/atom true)]\n    (fn []\n      [:input {:class (if @valid \"valid\" \"invalid\")\n               :value @value\n               ;; You shouldn't have to manually delete the whole contents of the input\n               :on-click (fn [e]\n                           (. (.-target e) focus)\n                           (. (.-target e) select))\n               :on-change (fn [e]\n                            (let [v (-> e .-target .-value)]\n                              (reset! value v)\n                              (if (valid-float? v)\n                                (do\n                                  (reset! valid true)\n                                  (is-valid-fn v))\n                                (reset! valid false))))}])))\n\n(defn temperature-converter []\n  (let [celsius-input (r/atom 0)\n        fahrenheit-input (r/atom (c->f @celsius-input))]\n    (fn []\n      [:div\n       [:div \"Celsius: \"\n        [temperature-input celsius-input #(reset! fahrenheit-input (c->f %))]]\n       [:div \"Fahrenheit: \"\n        [temperature-input fahrenheit-input #(reset! celsius-input (f->c %))]]])))\n\n(defn validate-date-str [s]\n  (let [js-date (js/Date. s)]\n    (when (not-every? js/Number.isNaN [(.getMonth js-date) (.getDay js-date) (.getYear js-date)])\n      js-date)))\n\n(defn flight-type-input [state]\n  [:select {:value (@state :flight-type)\n            :on-change\n            (fn [e]\n              (swap! state #(assoc % :flight-type (-> e .-target .-value))))}\n   [:option {:value \"one-way\"} \"One-Way\"]\n   [:option {:value \"round-trip\"} \"Round-Trip\"]])\n\n(defn flight-date-input [{:keys [context value invalid-when complete-when disabled-when]}]\n  (let [validity (r/atom :incomplete)]\n    (fn []\n      [:input {:class\n               (cond\n                 (= @validity :invalid) \"invalid\"\n                 (= @validity :complete) \"complete\"\n                 :else nil)\n               :disabled (when\n                          (and disabled-when\n                               (disabled-when @context))\n                           true)\n               :value (@context value)\n               :on-change (fn [e]\n                            (let [v (-> e .-target .-value)]\n                              (swap! context #(assoc % value v))))}])))\n\n(defn flight-submit-button [{:keys [context disabled-when]}]\n  [:button\n   {:disabled (when\n               (and disabled-when\n                    (disabled-when @context))\n                true)\n    :on-click (fn [e] (js/console.log (@context :departure-date)))}\n   \"Submit\"])\n\n(defn flight-booker []\n  (let [state (r/atom {:flight-type \"one-way\"\n                       :departure-date \"\"\n                       :return-date \"\"})]\n    (fn []\n      [:div\n       [flight-type-input state]\n       [flight-date-input {:context state\n                           :value :departure-date\n                           :invalid-when nil}]\n       [flight-date-input {:context state\n                           :value :return-date\n                           :invalid-when nil\n                           :disabled-when (fn [ctx] (= (:flight-type ctx) \"one-way\"))}]\n       [flight-submit-button {:context state\n                              :disabled-when\n                              (fn [ctx]\n                                (some nil?\n                                      (map validate-date-str\n                                           [(:departure-date ctx)\n                                            (:return-date ctx)])))}]])))\n"]}